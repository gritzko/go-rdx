package rdx

import "errors"

// action indices for the parser

const (
	JDRenum     = 0
	JDRNL       = JDRenum + 1
	JDRUtf8cp1  = JDRenum + 10
	JDRUtf8cp2  = JDRenum + 11
	JDRUtf8cp3  = JDRenum + 12
	JDRUtf8cp4  = JDRenum + 13
	JDRInt      = JDRenum + 19
	JDRFloat    = JDRenum + 20
	JDRTerm     = JDRenum + 21
	JDRRef      = JDRenum + 22
	JDRString   = JDRenum + 23
	JDRMLString = JDRenum + 24
	JDRStamp    = JDRenum + 25
	JDRNoStamp  = JDRenum + 26
	JDROpenP    = JDRenum + 27
	JDRCloseP   = JDRenum + 28
	JDROpenL    = JDRenum + 29
	JDRCloseL   = JDRenum + 30
	JDROpenE    = JDRenum + 31
	JDRCloseE   = JDRenum + 32
	JDROpenX    = JDRenum + 33
	JDRCloseX   = JDRenum + 34
	JDRComma    = JDRenum + 35
	JDRColon    = JDRenum + 36
	JDROpen     = JDRenum + 37
	JDRClose    = JDRenum + 38
	JDRInter    = JDRenum + 39
	JDRFIRST    = JDRenum + 41
	JDRRoot     = JDRenum + 42
)

// user functions (callbacks) for the parser
// func JDRonNL (tok []byte, state *JDRstate) error
// func JDRonUtf8cp1 (tok []byte, state *JDRstate) error
// func JDRonUtf8cp2 (tok []byte, state *JDRstate) error
// func JDRonUtf8cp3 (tok []byte, state *JDRstate) error
// func JDRonUtf8cp4 (tok []byte, state *JDRstate) error
// func JDRonInt (tok []byte, state *JDRstate) error
// func JDRonFloat (tok []byte, state *JDRstate) error
// func JDRonTerm (tok []byte, state *JDRstate) error
// func JDRonRef (tok []byte, state *JDRstate) error
// func JDRonString (tok []byte, state *JDRstate) error
// func JDRonMLString (tok []byte, state *JDRstate) error
// func JDRonStamp (tok []byte, state *JDRstate) error
// func JDRonNoStamp (tok []byte, state *JDRstate) error
// func JDRonOpenP (tok []byte, state *JDRstate) error
// func JDRonCloseP (tok []byte, state *JDRstate) error
// func JDRonOpenL (tok []byte, state *JDRstate) error
// func JDRonCloseL (tok []byte, state *JDRstate) error
// func JDRonOpenE (tok []byte, state *JDRstate) error
// func JDRonCloseE (tok []byte, state *JDRstate) error
// func JDRonOpenX (tok []byte, state *JDRstate) error
// func JDRonCloseX (tok []byte, state *JDRstate) error
// func JDRonComma (tok []byte, state *JDRstate) error
// func JDRonColon (tok []byte, state *JDRstate) error
// func JDRonOpen (tok []byte, state *JDRstate) error
// func JDRonClose (tok []byte, state *JDRstate) error
// func JDRonInter (tok []byte, state *JDRstate) error
// func JDRonFIRST (tok []byte, state *JDRstate) error
// func JDRonRoot (tok []byte, state *JDRstate) error

var _JDR_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3,
	1, 4, 1, 5, 1, 6, 1, 7,
	1, 8, 1, 9, 1, 11, 1, 13,
	1, 15, 1, 17, 1, 19, 1, 21,
	1, 22, 1, 23, 1, 27, 1, 29,
	1, 31, 1, 33, 1, 35, 1, 37,
	1, 39, 1, 41, 1, 43, 1, 45,
	1, 54, 1, 55, 2, 1, 0, 2,
	1, 22, 2, 1, 55, 2, 3, 2,
	2, 3, 4, 2, 3, 6, 2, 3,
	8, 2, 5, 2, 2, 5, 4, 2,
	5, 6, 2, 5, 8, 2, 7, 2,
	2, 7, 4, 2, 7, 6, 2, 7,
	8, 2, 9, 2, 2, 9, 4, 2,
	9, 6, 2, 9, 8, 2, 11, 0,
	2, 11, 22, 2, 13, 0, 2, 13,
	22, 2, 15, 0, 2, 15, 22, 2,
	17, 0, 2, 17, 22, 2, 19, 0,
	2, 19, 22, 2, 21, 0, 2, 21,
	22, 2, 23, 0, 2, 27, 0, 2,
	27, 22, 2, 29, 0, 2, 31, 0,
	2, 31, 22, 2, 33, 0, 2, 35,
	0, 2, 35, 22, 2, 37, 0, 2,
	39, 0, 2, 39, 22, 2, 41, 0,
	2, 43, 0, 2, 45, 0, 2, 46,
	26, 2, 46, 30, 2, 46, 34, 2,
	46, 38, 2, 47, 55, 2, 48, 28,
	2, 48, 32, 2, 48, 36, 2, 48,
	40, 2, 49, 55, 2, 50, 42, 2,
	50, 44, 2, 51, 55, 2, 52, 18,
	2, 52, 20, 2, 53, 55, 2, 54,
	0, 2, 54, 55, 3, 1, 46, 26,
	3, 1, 46, 30, 3, 1, 46, 34,
	3, 1, 46, 38, 3, 1, 47, 55,
	3, 1, 48, 28, 3, 1, 48, 32,
	3, 1, 48, 36, 3, 1, 48, 40,
	3, 1, 49, 55, 3, 1, 50, 42,
	3, 1, 50, 44, 3, 1, 51, 55,
	3, 1, 52, 18, 3, 1, 52, 20,
	3, 1, 53, 55, 3, 23, 47, 55,
	3, 23, 53, 55, 3, 29, 49, 55,
	3, 33, 49, 55, 3, 37, 49, 55,
	3, 41, 49, 55, 3, 43, 51, 55,
	3, 45, 51, 55, 3, 47, 46, 26,
	3, 47, 46, 30, 3, 47, 46, 34,
	3, 47, 46, 38, 3, 47, 48, 28,
	3, 47, 48, 32, 3, 47, 48, 36,
	3, 47, 48, 40, 3, 47, 50, 42,
	3, 47, 50, 44, 3, 47, 52, 18,
	3, 47, 52, 20, 3, 49, 46, 26,
	3, 49, 46, 30, 3, 49, 46, 34,
	3, 49, 46, 38, 3, 49, 48, 28,
	3, 49, 48, 32, 3, 49, 48, 36,
	3, 49, 48, 40, 3, 49, 50, 42,
	3, 49, 50, 44, 3, 49, 52, 18,
	3, 49, 52, 20, 3, 51, 46, 26,
	3, 51, 46, 30, 3, 51, 46, 34,
	3, 51, 46, 38, 3, 51, 48, 28,
	3, 51, 48, 32, 3, 51, 48, 36,
	3, 51, 48, 40, 3, 51, 50, 42,
	3, 51, 50, 44, 3, 51, 52, 18,
	3, 51, 52, 20, 3, 52, 12, 10,
	3, 52, 16, 14, 3, 53, 46, 26,
	3, 53, 46, 30, 3, 53, 46, 34,
	3, 53, 46, 38, 3, 53, 48, 28,
	3, 53, 48, 32, 3, 53, 48, 36,
	3, 53, 48, 40, 3, 53, 50, 42,
	3, 53, 50, 44, 3, 53, 52, 18,
	3, 53, 52, 20, 3, 54, 46, 26,
	3, 54, 46, 30, 3, 54, 46, 34,
	3, 54, 46, 38, 3, 54, 48, 28,
	3, 54, 48, 32, 3, 54, 48, 36,
	3, 54, 48, 40, 3, 54, 50, 42,
	3, 54, 50, 44, 3, 54, 52, 18,
	3, 54, 52, 20, 4, 1, 47, 46,
	26, 4, 1, 47, 46, 30, 4, 1,
	47, 46, 34, 4, 1, 47, 46, 38,
	4, 1, 47, 48, 28, 4, 1, 47,
	48, 32, 4, 1, 47, 48, 36, 4,
	1, 47, 48, 40, 4, 1, 47, 50,
	42, 4, 1, 47, 50, 44, 4, 1,
	47, 52, 18, 4, 1, 47, 52, 20,
	4, 1, 49, 46, 26, 4, 1, 49,
	46, 30, 4, 1, 49, 46, 34, 4,
	1, 49, 46, 38, 4, 1, 49, 48,
	28, 4, 1, 49, 48, 32, 4, 1,
	49, 48, 36, 4, 1, 49, 48, 40,
	4, 1, 49, 50, 42, 4, 1, 49,
	50, 44, 4, 1, 49, 52, 18, 4,
	1, 49, 52, 20, 4, 1, 51, 46,
	26, 4, 1, 51, 46, 30, 4, 1,
	51, 46, 34, 4, 1, 51, 46, 38,
	4, 1, 51, 48, 28, 4, 1, 51,
	48, 32, 4, 1, 51, 48, 36, 4,
	1, 51, 48, 40, 4, 1, 51, 50,
	42, 4, 1, 51, 50, 44, 4, 1,
	51, 52, 18, 4, 1, 51, 52, 20,
	4, 1, 52, 12, 10, 4, 1, 52,
	16, 14, 4, 1, 53, 46, 26, 4,
	1, 53, 46, 30, 4, 1, 53, 46,
	34, 4, 1, 53, 46, 38, 4, 1,
	53, 48, 28, 4, 1, 53, 48, 32,
	4, 1, 53, 48, 36, 4, 1, 53,
	48, 40, 4, 1, 53, 50, 42, 4,
	1, 53, 50, 44, 4, 1, 53, 52,
	18, 4, 1, 53, 52, 20, 4, 23,
	47, 46, 26, 4, 23, 47, 46, 30,
	4, 23, 47, 46, 34, 4, 23, 47,
	46, 38, 4, 23, 47, 48, 28, 4,
	23, 47, 48, 32, 4, 23, 47, 48,
	36, 4, 23, 47, 48, 40, 4, 23,
	47, 50, 42, 4, 23, 47, 50, 44,
	4, 23, 47, 52, 18, 4, 23, 47,
	52, 20, 4, 23, 53, 46, 26, 4,
	23, 53, 46, 30, 4, 23, 53, 46,
	34, 4, 23, 53, 46, 38, 4, 23,
	53, 48, 28, 4, 23, 53, 48, 32,
	4, 23, 53, 48, 36, 4, 23, 53,
	48, 40, 4, 23, 53, 50, 42, 4,
	23, 53, 50, 44, 4, 23, 53, 52,
	18, 4, 23, 53, 52, 20, 4, 24,
	25, 47, 55, 4, 24, 25, 53, 55,
	4, 29, 49, 46, 26, 4, 29, 49,
	46, 30, 4, 29, 49, 46, 34, 4,
	29, 49, 46, 38, 4, 29, 49, 48,
	28, 4, 29, 49, 48, 32, 4, 29,
	49, 48, 36, 4, 29, 49, 48, 40,
	4, 29, 49, 50, 42, 4, 29, 49,
	50, 44, 4, 29, 49, 52, 18, 4,
	29, 49, 52, 20, 4, 33, 49, 46,
	26, 4, 33, 49, 46, 30, 4, 33,
	49, 46, 34, 4, 33, 49, 46, 38,
	4, 33, 49, 48, 28, 4, 33, 49,
	48, 32, 4, 33, 49, 48, 36, 4,
	33, 49, 48, 40, 4, 33, 49, 50,
	42, 4, 33, 49, 50, 44, 4, 33,
	49, 52, 18, 4, 33, 49, 52, 20,
	4, 37, 49, 46, 26, 4, 37, 49,
	46, 30, 4, 37, 49, 46, 34, 4,
	37, 49, 46, 38, 4, 37, 49, 48,
	28, 4, 37, 49, 48, 32, 4, 37,
	49, 48, 36, 4, 37, 49, 48, 40,
	4, 37, 49, 50, 42, 4, 37, 49,
	50, 44, 4, 37, 49, 52, 18, 4,
	37, 49, 52, 20, 4, 41, 49, 46,
	26, 4, 41, 49, 46, 30, 4, 41,
	49, 46, 34, 4, 41, 49, 46, 38,
	4, 41, 49, 48, 28, 4, 41, 49,
	48, 32, 4, 41, 49, 48, 36, 4,
	41, 49, 48, 40, 4, 41, 49, 50,
	42, 4, 41, 49, 50, 44, 4, 41,
	49, 52, 18, 4, 41, 49, 52, 20,
	4, 43, 51, 46, 26, 4, 43, 51,
	46, 30, 4, 43, 51, 46, 34, 4,
	43, 51, 46, 38, 4, 43, 51, 48,
	28, 4, 43, 51, 48, 32, 4, 43,
	51, 48, 36, 4, 43, 51, 48, 40,
	4, 43, 51, 50, 42, 4, 43, 51,
	50, 44, 4, 43, 51, 52, 18, 4,
	43, 51, 52, 20, 4, 45, 51, 46,
	26, 4, 45, 51, 46, 30, 4, 45,
	51, 46, 34, 4, 45, 51, 46, 38,
	4, 45, 51, 48, 28, 4, 45, 51,
	48, 32, 4, 45, 51, 48, 36, 4,
	45, 51, 48, 40, 4, 45, 51, 50,
	42, 4, 45, 51, 50, 44, 4, 45,
	51, 52, 18, 4, 45, 51, 52, 20,
	4, 47, 52, 12, 10, 4, 47, 52,
	16, 14, 4, 49, 52, 12, 10, 4,
	49, 52, 16, 14, 4, 51, 52, 12,
	10, 4, 51, 52, 16, 14, 4, 53,
	52, 12, 10, 4, 53, 52, 16, 14,
	4, 54, 52, 12, 10, 4, 54, 52,
	16, 14, 5, 1, 24, 25, 47, 55,
	5, 1, 24, 25, 53, 55, 5, 1,
	47, 52, 12, 10, 5, 1, 47, 52,
	16, 14, 5, 1, 49, 52, 12, 10,
	5, 1, 49, 52, 16, 14, 5, 1,
	51, 52, 12, 10, 5, 1, 51, 52,
	16, 14, 5, 1, 53, 52, 12, 10,
	5, 1, 53, 52, 16, 14, 5, 11,
	24, 25, 53, 55, 5, 13, 24, 25,
	53, 55, 5, 15, 24, 25, 53, 55,
	5, 17, 24, 25, 53, 55, 5, 19,
	24, 25, 53, 55, 5, 21, 24, 25,
	53, 55, 5, 23, 47, 52, 12, 10,
	5, 23, 53, 52, 12, 10, 5, 24,
	25, 47, 46, 26, 5, 24, 25, 47,
	46, 30, 5, 24, 25, 47, 46, 34,
	5, 24, 25, 47, 46, 38, 5, 24,
	25, 47, 48, 28, 5, 24, 25, 47,
	48, 32, 5, 24, 25, 47, 48, 36,
	5, 24, 25, 47, 48, 40, 5, 24,
	25, 47, 50, 42, 5, 24, 25, 47,
	50, 44, 5, 24, 25, 47, 52, 18,
	5, 24, 25, 47, 52, 20, 5, 24,
	25, 53, 46, 26, 5, 24, 25, 53,
	46, 30, 5, 24, 25, 53, 46, 34,
	5, 24, 25, 53, 46, 38, 5, 24,
	25, 53, 48, 28, 5, 24, 25, 53,
	48, 32, 5, 24, 25, 53, 48, 36,
	5, 24, 25, 53, 48, 40, 5, 24,
	25, 53, 50, 42, 5, 24, 25, 53,
	50, 44, 5, 24, 25, 53, 52, 18,
	5, 24, 25, 53, 52, 20, 5, 27,
	24, 25, 47, 55, 5, 29, 49, 52,
	12, 10, 5, 29, 49, 52, 16, 14,
	5, 31, 24, 25, 47, 55, 5, 33,
	49, 52, 12, 10, 5, 33, 49, 52,
	16, 14, 5, 35, 24, 25, 47, 55,
	5, 37, 49, 52, 12, 10, 5, 37,
	49, 52, 16, 14, 5, 39, 24, 25,
	47, 55, 5, 41, 49, 52, 12, 10,
	5, 41, 49, 52, 16, 14, 5, 43,
	51, 52, 12, 10, 5, 43, 51, 52,
	16, 14, 5, 45, 51, 52, 12, 10,
	5, 45, 51, 52, 16, 14, 5, 52,
	12, 10, 16, 14, 6, 1, 24, 25,
	47, 46, 26, 6, 1, 24, 25, 47,
	46, 30, 6, 1, 24, 25, 47, 46,
	34, 6, 1, 24, 25, 47, 46, 38,
	6, 1, 24, 25, 47, 48, 28, 6,
	1, 24, 25, 47, 48, 32, 6, 1,
	24, 25, 47, 48, 36, 6, 1, 24,
	25, 47, 48, 40, 6, 1, 24, 25,
	47, 50, 42, 6, 1, 24, 25, 47,
	50, 44, 6, 1, 24, 25, 47, 52,
	18, 6, 1, 24, 25, 47, 52, 20,
	6, 1, 24, 25, 53, 46, 26, 6,
	1, 24, 25, 53, 46, 30, 6, 1,
	24, 25, 53, 46, 34, 6, 1, 24,
	25, 53, 46, 38, 6, 1, 24, 25,
	53, 48, 28, 6, 1, 24, 25, 53,
	48, 32, 6, 1, 24, 25, 53, 48,
	36, 6, 1, 24, 25, 53, 48, 40,
	6, 1, 24, 25, 53, 50, 42, 6,
	1, 24, 25, 53, 50, 44, 6, 1,
	24, 25, 53, 52, 18, 6, 1, 24,
	25, 53, 52, 20, 6, 1, 52, 12,
	10, 16, 14, 6, 11, 24, 25, 53,
	46, 26, 6, 11, 24, 25, 53, 46,
	30, 6, 11, 24, 25, 53, 46, 34,
	6, 11, 24, 25, 53, 46, 38, 6,
	11, 24, 25, 53, 48, 28, 6, 11,
	24, 25, 53, 48, 32, 6, 11, 24,
	25, 53, 48, 36, 6, 11, 24, 25,
	53, 48, 40, 6, 11, 24, 25, 53,
	50, 42, 6, 11, 24, 25, 53, 50,
	44, 6, 11, 24, 25, 53, 52, 18,
	6, 11, 24, 25, 53, 52, 20, 6,
	13, 24, 25, 53, 46, 26, 6, 13,
	24, 25, 53, 46, 30, 6, 13, 24,
	25, 53, 46, 34, 6, 13, 24, 25,
	53, 46, 38, 6, 13, 24, 25, 53,
	48, 28, 6, 13, 24, 25, 53, 48,
	32, 6, 13, 24, 25, 53, 48, 36,
	6, 13, 24, 25, 53, 48, 40, 6,
	13, 24, 25, 53, 50, 42, 6, 13,
	24, 25, 53, 50, 44, 6, 13, 24,
	25, 53, 52, 18, 6, 13, 24, 25,
	53, 52, 20, 6, 15, 24, 25, 53,
	46, 26, 6, 15, 24, 25, 53, 46,
	30, 6, 15, 24, 25, 53, 46, 34,
	6, 15, 24, 25, 53, 46, 38, 6,
	15, 24, 25, 53, 48, 28, 6, 15,
	24, 25, 53, 48, 32, 6, 15, 24,
	25, 53, 48, 36, 6, 15, 24, 25,
	53, 48, 40, 6, 15, 24, 25, 53,
	50, 42, 6, 15, 24, 25, 53, 50,
	44, 6, 15, 24, 25, 53, 52, 18,
	6, 15, 24, 25, 53, 52, 20, 6,
	17, 24, 25, 53, 46, 26, 6, 17,
	24, 25, 53, 46, 30, 6, 17, 24,
	25, 53, 46, 34, 6, 17, 24, 25,
	53, 46, 38, 6, 17, 24, 25, 53,
	48, 28, 6, 17, 24, 25, 53, 48,
	32, 6, 17, 24, 25, 53, 48, 36,
	6, 17, 24, 25, 53, 48, 40, 6,
	17, 24, 25, 53, 50, 42, 6, 17,
	24, 25, 53, 50, 44, 6, 17, 24,
	25, 53, 52, 18, 6, 17, 24, 25,
	53, 52, 20, 6, 19, 24, 25, 53,
	46, 26, 6, 19, 24, 25, 53, 46,
	30, 6, 19, 24, 25, 53, 46, 34,
	6, 19, 24, 25, 53, 46, 38, 6,
	19, 24, 25, 53, 48, 28, 6, 19,
	24, 25, 53, 48, 32, 6, 19, 24,
	25, 53, 48, 36, 6, 19, 24, 25,
	53, 48, 40, 6, 19, 24, 25, 53,
	50, 42, 6, 19, 24, 25, 53, 50,
	44, 6, 19, 24, 25, 53, 52, 18,
	6, 19, 24, 25, 53, 52, 20, 6,
	21, 24, 25, 53, 46, 26, 6, 21,
	24, 25, 53, 46, 30, 6, 21, 24,
	25, 53, 46, 34, 6, 21, 24, 25,
	53, 46, 38, 6, 21, 24, 25, 53,
	48, 28, 6, 21, 24, 25, 53, 48,
	32, 6, 21, 24, 25, 53, 48, 36,
	6, 21, 24, 25, 53, 48, 40, 6,
	21, 24, 25, 53, 50, 42, 6, 21,
	24, 25, 53, 50, 44, 6, 21, 24,
	25, 53, 52, 18, 6, 21, 24, 25,
	53, 52, 20, 6, 24, 25, 47, 52,
	12, 10, 6, 24, 25, 47, 52, 16,
	14, 6, 24, 25, 53, 52, 12, 10,
	6, 24, 25, 53, 52, 16, 14, 6,
	27, 24, 25, 47, 46, 26, 6, 27,
	24, 25, 47, 46, 30, 6, 27, 24,
	25, 47, 46, 34, 6, 27, 24, 25,
	47, 46, 38, 6, 27, 24, 25, 47,
	48, 28, 6, 27, 24, 25, 47, 48,
	32, 6, 27, 24, 25, 47, 48, 36,
	6, 27, 24, 25, 47, 48, 40, 6,
	27, 24, 25, 47, 50, 42, 6, 27,
	24, 25, 47, 50, 44, 6, 27, 24,
	25, 47, 52, 18, 6, 27, 24, 25,
	47, 52, 20, 6, 31, 24, 25, 47,
	46, 26, 6, 31, 24, 25, 47, 46,
	30, 6, 31, 24, 25, 47, 46, 34,
	6, 31, 24, 25, 47, 46, 38, 6,
	31, 24, 25, 47, 48, 28, 6, 31,
	24, 25, 47, 48, 32, 6, 31, 24,
	25, 47, 48, 36, 6, 31, 24, 25,
	47, 48, 40, 6, 31, 24, 25, 47,
	50, 42, 6, 31, 24, 25, 47, 50,
	44, 6, 31, 24, 25, 47, 52, 18,
	6, 31, 24, 25, 47, 52, 20, 6,
	35, 24, 25, 47, 46, 26, 6, 35,
	24, 25, 47, 46, 30, 6, 35, 24,
	25, 47, 46, 34, 6, 35, 24, 25,
	47, 46, 38, 6, 35, 24, 25, 47,
	48, 28, 6, 35, 24, 25, 47, 48,
	32, 6, 35, 24, 25, 47, 48, 36,
	6, 35, 24, 25, 47, 48, 40, 6,
	35, 24, 25, 47, 50, 42, 6, 35,
	24, 25, 47, 50, 44, 6, 35, 24,
	25, 47, 52, 18, 6, 35, 24, 25,
	47, 52, 20, 6, 39, 24, 25, 47,
	46, 26, 6, 39, 24, 25, 47, 46,
	30, 6, 39, 24, 25, 47, 46, 34,
	6, 39, 24, 25, 47, 46, 38, 6,
	39, 24, 25, 47, 48, 28, 6, 39,
	24, 25, 47, 48, 32, 6, 39, 24,
	25, 47, 48, 36, 6, 39, 24, 25,
	47, 48, 40, 6, 39, 24, 25, 47,
	50, 42, 6, 39, 24, 25, 47, 50,
	44, 6, 39, 24, 25, 47, 52, 18,
	6, 39, 24, 25, 47, 52, 20, 6,
	47, 52, 12, 10, 16, 14, 6, 49,
	52, 12, 10, 16, 14, 6, 51, 52,
	12, 10, 16, 14, 6, 53, 52, 12,
	10, 16, 14, 6, 54, 52, 12, 10,
	16, 14, 7, 1, 24, 25, 47, 52,
	12, 10, 7, 1, 24, 25, 47, 52,
	16, 14, 7, 1, 24, 25, 53, 52,
	12, 10, 7, 1, 24, 25, 53, 52,
	16, 14, 7, 1, 47, 52, 12, 10,
	16, 14, 7, 1, 49, 52, 12, 10,
	16, 14, 7, 1, 51, 52, 12, 10,
	16, 14, 7, 1, 53, 52, 12, 10,
	16, 14, 7, 11, 24, 25, 53, 52,
	12, 10, 7, 11, 24, 25, 53, 52,
	16, 14, 7, 13, 24, 25, 53, 52,
	12, 10, 7, 13, 24, 25, 53, 52,
	16, 14, 7, 17, 24, 25, 53, 52,
	12, 10, 7, 19, 24, 25, 53, 52,
	12, 10, 7, 19, 24, 25, 53, 52,
	16, 14, 7, 21, 24, 25, 53, 52,
	12, 10, 7, 21, 24, 25, 53, 52,
	16, 14, 7, 27, 24, 25, 47, 52,
	12, 10, 7, 27, 24, 25, 47, 52,
	16, 14, 7, 29, 49, 52, 12, 10,
	16, 14, 7, 31, 24, 25, 47, 52,
	12, 10, 7, 31, 24, 25, 47, 52,
	16, 14, 7, 33, 49, 52, 12, 10,
	16, 14, 7, 35, 24, 25, 47, 52,
	12, 10, 7, 35, 24, 25, 47, 52,
	16, 14, 7, 37, 49, 52, 12, 10,
	16, 14, 7, 39, 24, 25, 47, 52,
	12, 10, 7, 39, 24, 25, 47, 52,
	16, 14, 7, 41, 49, 52, 12, 10,
	16, 14, 7, 43, 51, 52, 12, 10,
	16, 14, 7, 45, 51, 52, 12, 10,
	16, 14, 8, 24, 25, 47, 52, 12,
	10, 16, 14, 8, 24, 25, 53, 52,
	12, 10, 16, 14, 9, 1, 24, 25,
	47, 52, 12, 10, 16, 14, 9, 1,
	24, 25, 53, 52, 12, 10, 16, 14,
	9, 11, 24, 25, 53, 52, 12, 10,
	16, 14, 9, 19, 24, 25, 53, 52,
	12, 10, 16, 14, 9, 21, 24, 25,
	53, 52, 12, 10, 16, 14, 9, 27,
	24, 25, 47, 52, 12, 10, 16, 14,
	9, 31, 24, 25, 47, 52, 12, 10,
	16, 14, 9, 35, 24, 25, 47, 52,
	12, 10, 16, 14, 9, 39, 24, 25,
	47, 52, 12, 10, 16, 14,
}

var _JDR_key_offsets []int16 = []int16{
	0, 0, 14, 28, 31, 33, 41, 49,
	57, 68, 79, 81, 92, 94, 96, 107,
	109, 111, 113, 124, 132, 140, 142, 150,
	154, 163, 169, 175, 181, 187, 189, 203,
	205, 207, 221, 223, 225, 227, 241, 266,
	291, 316, 342, 368, 394, 420, 446, 472,
	497, 522, 547, 572, 597, 622, 651, 678,
	703, 731, 756, 782, 810, 835, 860, 884,
	909, 934, 960, 984, 1009, 1034, 1059, 1085,
	1111, 1136, 1160, 1184, 1210, 1235, 1260, 1285,
}

var _JDR_trans_keys []byte = []byte{
	10, 13, 34, 92, 128, 191, 192, 223,
	224, 239, 240, 247, 248, 255, 10, 13,
	34, 92, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 48, 49, 57, 48,
	57, 95, 126, 48, 57, 65, 90, 97,
	122, 95, 126, 48, 57, 65, 90, 97,
	122, 95, 126, 48, 57, 65, 90, 97,
	122, 96, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 96, 128, 191, 192,
	223, 224, 239, 240, 247, 248, 255, 128,
	191, 96, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 128, 191, 128, 191,
	96, 128, 191, 192, 223, 224, 239, 240,
	247, 248, 255, 128, 191, 128, 191, 128,
	191, 96, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 95, 126, 48, 57,
	65, 90, 97, 122, 95, 126, 48, 57,
	65, 90, 97, 122, 48, 57, 95, 126,
	48, 57, 65, 90, 97, 122, 43, 45,
	48, 57, 34, 47, 92, 98, 102, 110,
	114, 116, 117, 48, 57, 65, 90, 97,
	102, 48, 57, 65, 90, 97, 102, 48,
	57, 65, 90, 97, 102, 48, 57, 65,
	90, 97, 102, 128, 191, 10, 13, 34,
	92, 128, 191, 192, 223, 224, 239, 240,
	247, 248, 255, 128, 191, 128, 191, 10,
	13, 34, 92, 128, 191, 192, 223, 224,
	239, 240, 247, 248, 255, 128, 191, 128,
	191, 128, 191, 10, 13, 34, 92, 128,
	191, 192, 223, 224, 239, 240, 247, 248,
	255, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 60, 62, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 60, 62,
	91, 93, 96, 123, 125, 126, 49, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 48, 58, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 48,
	58, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 49, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 48, 58, 60, 62, 64, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 60, 62, 64,
	91, 93, 96, 123, 125, 126, 49, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 48, 58, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 48,
	58, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 49, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 48, 58, 60, 62, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 60, 62, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 60, 62,
	91, 93, 96, 123, 125, 126, 49, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 48, 58, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	60, 62, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 46,
	48, 58, 60, 62, 64, 69, 91, 93,
	96, 101, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 58, 60, 62, 64,
	69, 91, 93, 96, 101, 123, 125, 126,
	48, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 48,
	58, 60, 62, 91, 93, 96, 123, 125,
	126, 49, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	46, 58, 60, 62, 64, 69, 91, 93,
	96, 101, 123, 125, 126, 48, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 58, 60, 62, 64,
	91, 93, 96, 123, 125, 126, 48, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 48, 58, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 46,
	58, 60, 62, 64, 69, 91, 93, 96,
	101, 123, 125, 126, 48, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 58, 60, 62, 64,
	91, 93, 96, 123, 125, 126, 48, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 58, 60, 62,
	91, 93, 96, 123, 125, 126, 48, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 48, 58, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	60, 62, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 48,
	58, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 49, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 58, 60, 62, 91, 93, 96, 123,
	125, 126, 48, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 48, 58, 60, 62, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 60, 62, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 60, 62,
	64, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	60, 62, 64, 91, 93, 96, 123, 125,
	126, 49, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 60, 62, 91, 93, 96, 123,
	125, 126, 49, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 58, 60, 62, 91, 93, 96, 123,
	125, 126, 48, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 58, 60, 62, 91, 93, 96, 123,
	125, 126, 48, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 43,
	44, 45, 58, 60, 62, 64, 91, 93,
	96, 123, 125, 126, 48, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 58, 60, 62, 64, 91,
	93, 96, 123, 125, 126, 48, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 58, 60, 62, 64,
	91, 93, 96, 123, 125, 126, 48, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 58, 60, 62,
	64, 91, 93, 96, 123, 125, 126, 48,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 46, 58,
	60, 62, 64, 69, 91, 93, 96, 101,
	123, 125, 126, 48, 57, 65, 90, 95,
	122,
}

var _JDR_single_lengths []byte = []byte{
	0, 4, 4, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 0, 0, 1, 0,
	0, 0, 1, 2, 2, 0, 2, 2,
	9, 0, 0, 0, 0, 0, 4, 0,
	0, 4, 0, 0, 0, 4, 19, 19,
	19, 20, 20, 20, 20, 20, 20, 19,
	19, 19, 19, 19, 19, 23, 21, 19,
	22, 19, 20, 22, 19, 19, 18, 19,
	19, 20, 18, 19, 19, 19, 20, 20,
	19, 18, 18, 20, 19, 19, 19, 22,
}

var _JDR_range_lengths []byte = []byte{
	0, 5, 5, 1, 1, 3, 3, 3,
	5, 5, 1, 5, 1, 1, 5, 1,
	1, 1, 5, 3, 3, 1, 3, 1,
	0, 3, 3, 3, 3, 1, 5, 1,
	1, 5, 1, 1, 1, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
}

var _JDR_index_offsets []int16 = []int16{
	0, 0, 10, 20, 23, 25, 31, 37,
	43, 50, 57, 59, 66, 68, 70, 77,
	79, 81, 83, 90, 96, 102, 104, 110,
	114, 124, 128, 132, 136, 140, 142, 152,
	154, 156, 166, 168, 170, 172, 182, 205,
	228, 251, 275, 299, 323, 347, 371, 395,
	418, 441, 464, 487, 510, 533, 560, 585,
	608, 634, 657, 681, 707, 730, 753, 775,
	798, 821, 845, 867, 890, 913, 936, 960,
	984, 1007, 1029, 1051, 1075, 1098, 1121, 1144,
}

var _JDR_trans_targs []byte = []byte{
	0, 0, 41, 24, 0, 29, 31, 34,
	0, 2, 0, 0, 41, 24, 0, 29,
	31, 34, 0, 2, 53, 79, 0, 54,
	0, 57, 57, 57, 57, 57, 0, 62,
	62, 62, 62, 62, 0, 66, 66, 66,
	66, 66, 0, 70, 0, 10, 12, 15,
	0, 9, 70, 0, 10, 12, 15, 0,
	9, 11, 0, 70, 0, 10, 12, 15,
	0, 9, 13, 0, 14, 0, 70, 0,
	10, 12, 15, 0, 9, 16, 0, 17,
	0, 18, 0, 70, 0, 10, 12, 15,
	0, 9, 73, 73, 73, 73, 73, 0,
	74, 74, 74, 74, 74, 0, 76, 0,
	57, 57, 77, 57, 57, 0, 21, 21,
	76, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 25, 0, 26, 26, 26, 0,
	27, 27, 27, 0, 28, 28, 28, 0,
	1, 1, 1, 0, 30, 0, 0, 0,
	41, 24, 0, 29, 31, 34, 0, 2,
	32, 0, 33, 0, 0, 0, 41, 24,
	0, 29, 31, 34, 0, 2, 35, 0,
	36, 0, 37, 0, 0, 0, 41, 24,
	0, 29, 31, 34, 0, 2, 39, 40,
	39, 39, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 65, 69, 8, 71, 72,
	61, 59, 61, 61, 0, 39, 40, 39,
	39, 1, 44, 47, 50, 3, 56, 55,
	58, 60, 65, 69, 8, 71, 72, 61,
	59, 61, 61, 0, 39, 40, 39, 39,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 42, 43, 42, 42, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	6, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 42, 43, 42, 42, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	6, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 42, 43, 42, 42, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	6, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 45, 46, 45, 45, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	7, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 45, 46, 45, 45, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	7, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 45, 46, 45, 45, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	7, 65, 69, 8, 71, 72, 61, 59,
	61, 61, 0, 48, 49, 48, 48, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	65, 69, 8, 71, 72, 61, 59, 61,
	61, 0, 48, 49, 48, 48, 1, 44,
	47, 50, 3, 56, 55, 58, 60, 65,
	69, 8, 71, 72, 61, 59, 61, 61,
	0, 48, 49, 48, 48, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 65, 69,
	8, 71, 72, 61, 59, 61, 61, 0,
	51, 52, 51, 51, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 65, 69, 8,
	71, 72, 61, 59, 61, 61, 0, 51,
	52, 51, 51, 1, 44, 47, 50, 3,
	56, 55, 58, 60, 65, 69, 8, 71,
	72, 61, 59, 61, 61, 0, 51, 52,
	51, 51, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 65, 69, 8, 71, 72,
	61, 59, 61, 61, 0, 42, 43, 42,
	42, 1, 44, 47, 50, 3, 4, 56,
	55, 58, 60, 6, 23, 65, 69, 8,
	23, 71, 72, 61, 59, 61, 61, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	3, 55, 58, 60, 6, 23, 65, 69,
	8, 23, 71, 72, 61, 54, 61, 61,
	0, 51, 52, 51, 51, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 65, 69,
	8, 71, 72, 61, 59, 61, 61, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	5, 4, 55, 58, 60, 6, 75, 65,
	69, 8, 75, 71, 72, 61, 61, 61,
	61, 0, 42, 43, 42, 42, 1, 44,
	47, 50, 3, 55, 58, 60, 6, 65,
	69, 8, 71, 72, 57, 57, 57, 57,
	0, 45, 46, 45, 45, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 7, 65,
	69, 8, 71, 72, 61, 59, 61, 61,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 5, 4, 55, 58, 60, 6, 75,
	65, 69, 8, 75, 71, 72, 61, 59,
	61, 61, 0, 48, 49, 48, 48, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	65, 69, 8, 71, 72, 61, 59, 61,
	61, 0, 42, 43, 42, 42, 1, 44,
	47, 50, 5, 55, 58, 60, 6, 65,
	69, 8, 71, 72, 61, 61, 61, 61,
	0, 63, 64, 63, 63, 1, 44, 47,
	50, 20, 55, 58, 60, 65, 69, 8,
	71, 72, 62, 62, 62, 62, 0, 63,
	64, 63, 63, 1, 44, 47, 50, 3,
	56, 55, 58, 60, 65, 69, 8, 71,
	72, 61, 59, 61, 61, 0, 63, 64,
	63, 63, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 65, 69, 8, 71, 72,
	61, 59, 61, 61, 0, 45, 46, 45,
	45, 1, 44, 47, 50, 3, 56, 55,
	58, 60, 7, 65, 69, 8, 71, 72,
	61, 59, 61, 61, 0, 67, 68, 67,
	67, 1, 44, 47, 50, 19, 55, 58,
	60, 65, 69, 8, 71, 72, 66, 66,
	66, 66, 0, 67, 68, 67, 67, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	65, 69, 8, 71, 72, 61, 59, 61,
	61, 0, 67, 68, 67, 67, 1, 44,
	47, 50, 3, 56, 55, 58, 60, 65,
	69, 8, 71, 72, 61, 59, 61, 61,
	0, 48, 49, 48, 48, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 65, 69,
	8, 71, 72, 61, 59, 61, 61, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 6, 65, 69,
	8, 71, 72, 61, 59, 61, 61, 0,
	45, 46, 45, 45, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 7, 65, 69,
	8, 71, 72, 61, 59, 61, 61, 0,
	48, 49, 48, 48, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 65, 69, 8,
	71, 72, 61, 59, 61, 61, 0, 67,
	68, 67, 67, 1, 44, 47, 50, 3,
	55, 58, 60, 65, 69, 8, 71, 72,
	73, 73, 73, 73, 0, 63, 64, 63,
	63, 1, 44, 47, 50, 3, 55, 58,
	60, 65, 69, 8, 71, 72, 74, 74,
	74, 74, 0, 42, 43, 42, 42, 1,
	44, 47, 21, 50, 22, 55, 58, 60,
	6, 65, 69, 8, 71, 72, 61, 78,
	61, 61, 0, 42, 43, 42, 42, 1,
	44, 47, 50, 3, 55, 58, 60, 6,
	65, 69, 8, 71, 72, 61, 76, 61,
	61, 0, 42, 43, 42, 42, 1, 44,
	47, 50, 3, 55, 58, 60, 6, 65,
	69, 8, 71, 72, 57, 77, 57, 57,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 5, 55, 58, 60, 6, 65, 69,
	8, 71, 72, 61, 78, 61, 61, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	3, 4, 55, 58, 60, 6, 23, 65,
	69, 8, 23, 71, 72, 61, 79, 61,
	61, 0,
}

var _JDR_trans_actions []int16 = []int16{
	0, 0, 0, 0, 0, 9, 13, 17,
	0, 5, 0, 0, 7, 7, 0, 73,
	76, 79, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 9, 13, 17,
	0, 5, 7, 0, 73, 76, 79, 0,
	70, 0, 0, 11, 0, 85, 88, 91,
	0, 82, 0, 0, 0, 0, 15, 0,
	97, 100, 103, 0, 94, 0, 0, 0,
	0, 0, 0, 19, 0, 109, 112, 115,
	0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	11, 11, 0, 85, 88, 91, 0, 82,
	0, 0, 0, 0, 0, 0, 15, 15,
	0, 97, 100, 103, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 19,
	0, 109, 112, 115, 0, 106, 57, 247,
	57, 57, 589, 549, 565, 581, 1377, 2812,
	585, 561, 577, 553, 569, 593, 557, 573,
	1382, 2812, 1382, 1382, 0, 0, 1, 0,
	0, 238, 199, 214, 229, 493, 1735, 232,
	208, 223, 202, 217, 241, 205, 220, 497,
	1735, 497, 497, 0, 3, 61, 3, 3,
	305, 253, 273, 293, 777, 1909, 297, 265,
	285, 257, 277, 309, 261, 281, 782, 1909,
	782, 782, 0, 29, 142, 29, 29, 2322,
	2252, 2280, 2308, 2923, 3115, 2315, 2273, 2301,
	145, 2259, 2287, 2329, 2266, 2294, 2931, 3115,
	2931, 2931, 0, 0, 1, 0, 0, 1627,
	1567, 1591, 1615, 2434, 3076, 1621, 1585, 1609,
	33, 1573, 1597, 1633, 1579, 1603, 2441, 3076,
	2441, 2441, 0, 3, 61, 3, 3, 1895,
	1825, 1853, 1881, 2835, 3095, 1888, 1846, 1874,
	64, 1832, 1860, 1902, 1839, 1867, 2843, 3095,
	2843, 2843, 0, 37, 157, 37, 37, 2518,
	2448, 2476, 2504, 2955, 3135, 2511, 2469, 2497,
	160, 2455, 2483, 2525, 2462, 2490, 2963, 3135,
	2963, 2963, 0, 0, 1, 0, 0, 1555,
	1495, 1519, 1543, 2420, 3067, 1549, 1513, 1537,
	33, 1501, 1525, 1561, 1507, 1531, 2427, 3067,
	2427, 2427, 0, 3, 61, 3, 3, 1811,
	1741, 1769, 1797, 2819, 3085, 1804, 1762, 1790,
	64, 1748, 1776, 1818, 1755, 1783, 2827, 3085,
	2827, 2827, 0, 39, 163, 39, 39, 1027,
	977, 997, 1017, 1645, 2971, 1022, 992, 1012,
	982, 1002, 1032, 987, 1007, 1651, 2971, 1651,
	1651, 0, 0, 1, 0, 0, 437, 397,
	413, 429, 1347, 2791, 433, 409, 425, 401,
	417, 441, 405, 421, 1352, 2791, 1352, 1352,
	0, 3, 61, 3, 3, 707, 657, 677,
	697, 1411, 2859, 702, 672, 692, 662, 682,
	712, 667, 687, 1417, 2859, 1417, 1417, 0,
	53, 193, 53, 53, 1267, 1217, 1237, 1257,
	1711, 3051, 1262, 1232, 1252, 1222, 1242, 1272,
	1227, 1247, 1717, 3051, 1717, 1717, 0, 0,
	1, 0, 0, 485, 445, 461, 477, 1357,
	2798, 481, 457, 473, 449, 465, 489, 453,
	469, 1362, 2798, 1362, 1362, 0, 3, 61,
	3, 3, 767, 717, 737, 757, 1423, 2867,
	762, 732, 752, 722, 742, 772, 727, 747,
	1429, 2867, 1429, 1429, 0, 21, 118, 21,
	21, 1986, 1916, 1944, 1972, 2883, 0, 3105,
	1979, 1937, 1965, 121, 0, 1923, 1951, 1993,
	0, 1930, 1958, 2891, 3105, 2891, 2891, 0,
	23, 124, 23, 23, 2070, 2000, 2028, 2056,
	2899, 2063, 2021, 2049, 127, 0, 2007, 2035,
	2077, 0, 2014, 2042, 2907, 0, 2907, 2907,
	0, 55, 196, 55, 55, 1327, 1277, 1297,
	1317, 1723, 3059, 1322, 1292, 1312, 1282, 1302,
	1332, 1287, 1307, 1729, 3059, 1729, 1729, 0,
	21, 118, 21, 21, 1986, 1916, 1944, 1972,
	0, 0, 1979, 1937, 1965, 121, 0, 1923,
	1951, 1993, 0, 1930, 1958, 0, 0, 0,
	0, 0, 27, 136, 27, 27, 2238, 2168,
	2196, 2224, 2915, 2231, 2189, 2217, 139, 2175,
	2203, 2245, 2182, 2210, 0, 0, 0, 0,
	0, 49, 184, 49, 49, 2770, 2700, 2728,
	2756, 3027, 3165, 2763, 2721, 2749, 187, 2707,
	2735, 2777, 2714, 2742, 3035, 3165, 3035, 3035,
	0, 21, 118, 21, 21, 1986, 1916, 1944,
	1972, 0, 0, 1979, 1937, 1965, 121, 0,
	1923, 1951, 1993, 0, 1930, 1958, 0, 0,
	0, 0, 0, 51, 190, 51, 51, 1207,
	1157, 1177, 1197, 1699, 3043, 1202, 1172, 1192,
	1162, 1182, 1212, 1167, 1187, 1705, 3043, 1705,
	1705, 0, 25, 130, 25, 25, 2154, 2084,
	2112, 2140, 0, 2147, 2105, 2133, 133, 2091,
	2119, 2161, 2098, 2126, 0, 0, 0, 0,
	0, 35, 154, 35, 35, 957, 907, 927,
	947, 0, 952, 922, 942, 912, 932, 962,
	917, 937, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 541, 501, 517, 533, 1367,
	2805, 537, 513, 529, 505, 521, 545, 509,
	525, 1372, 2805, 1372, 1372, 0, 3, 61,
	3, 3, 837, 787, 807, 827, 1435, 2875,
	832, 802, 822, 792, 812, 842, 797, 817,
	1441, 2875, 1441, 1441, 0, 41, 166, 41,
	41, 2602, 2532, 2560, 2588, 2979, 3145, 2595,
	2553, 2581, 169, 2539, 2567, 2609, 2546, 2574,
	2987, 3145, 2987, 2987, 0, 35, 154, 35,
	35, 897, 847, 867, 887, 0, 892, 862,
	882, 852, 872, 902, 857, 877, 0, 0,
	0, 0, 0, 0, 1, 0, 0, 389,
	349, 365, 381, 1337, 2784, 385, 361, 377,
	353, 369, 393, 357, 373, 1342, 2784, 1342,
	1342, 0, 3, 61, 3, 3, 647, 597,
	617, 637, 1399, 2851, 642, 612, 632, 602,
	622, 652, 607, 627, 1405, 2851, 1405, 1405,
	0, 43, 172, 43, 43, 1087, 1037, 1057,
	1077, 1663, 2995, 1082, 1052, 1072, 1042, 1062,
	1092, 1047, 1067, 1669, 2995, 1669, 1669, 0,
	31, 148, 31, 31, 2406, 2336, 2364, 2392,
	2939, 3125, 2399, 2357, 2385, 151, 2343, 2371,
	2413, 2350, 2378, 2947, 3125, 2947, 2947, 0,
	45, 175, 45, 45, 2686, 2616, 2644, 2672,
	3003, 3155, 2679, 2637, 2665, 178, 2623, 2651,
	2693, 2630, 2658, 3011, 3155, 3011, 3011, 0,
	47, 181, 47, 47, 1147, 1097, 1117, 1137,
	1681, 3019, 1142, 1112, 1132, 1102, 1122, 1152,
	1107, 1127, 1687, 3019, 1687, 1687, 0, 35,
	154, 35, 35, 897, 847, 867, 887, 1483,
	892, 862, 882, 852, 872, 902, 857, 877,
	0, 0, 0, 0, 0, 35, 154, 35,
	35, 957, 907, 927, 947, 1489, 952, 922,
	942, 912, 932, 962, 917, 937, 0, 0,
	0, 0, 0, 25, 130, 25, 25, 2154,
	2084, 2112, 0, 2140, 0, 2147, 2105, 2133,
	133, 2091, 2119, 2161, 2098, 2126, 0, 0,
	0, 0, 0, 23, 124, 23, 23, 2070,
	2000, 2028, 2056, 2899, 2063, 2021, 2049, 127,
	2007, 2035, 2077, 2014, 2042, 2907, 0, 2907,
	2907, 0, 23, 124, 23, 23, 2070, 2000,
	2028, 2056, 2899, 2063, 2021, 2049, 127, 2007,
	2035, 2077, 2014, 2042, 0, 0, 0, 0,
	0, 23, 124, 23, 23, 2070, 2000, 2028,
	2056, 0, 2063, 2021, 2049, 127, 2007, 2035,
	2077, 2014, 2042, 0, 0, 0, 0, 0,
	21, 118, 21, 21, 1986, 1916, 1944, 1972,
	2883, 0, 1979, 1937, 1965, 121, 0, 1923,
	1951, 1993, 0, 1930, 1958, 2891, 0, 2891,
	2891, 0,
}

var _JDR_eof_actions []int16 = []int16{
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 59,
	67, 1471, 972, 1393, 1639, 967, 1387, 325,
	226, 289, 341, 235, 301, 1447, 1453, 345,
	1447, 1465, 1693, 1447, 337, 1459, 321, 244,
	313, 1657, 317, 211, 269, 329, 1477, 1675,
	333, 317, 321, 1459, 1453, 1453, 1453, 1447,
}

const JDR_start int = 38
const JDR_first_final int = 38
const JDR_error int = 0

const JDR_en_main int = 38

// the public API function
//

func JDRlexer(state *JDRstate) (err error) {

	data := state.jdr
	var mark0 [64]int
	cs, p, pe, eof := 0, 0, len(data), len(data)

	{
		cs = JDR_start
	}

	{
		var _klen int
		var _trans int
		var _acts int
		var _nacts uint
		var _keys int
		if p == pe {
			goto _test_eof
		}
		if cs == 0 {
			goto _out
		}
	_resume:
		_keys = int(_JDR_key_offsets[cs])
		_trans = int(_JDR_index_offsets[cs])

		_klen = int(_JDR_single_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + _klen - 1)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + ((_upper - _lower) >> 1)
				switch {
				case data[p] < _JDR_trans_keys[_mid]:
					_upper = _mid - 1
				case data[p] > _JDR_trans_keys[_mid]:
					_lower = _mid + 1
				default:
					_trans += int(_mid - int(_keys))
					goto _match
				}
			}
			_keys += _klen
			_trans += _klen
		}

		_klen = int(_JDR_range_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + (_klen << 1) - 2)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + (((_upper - _lower) >> 1) & ^1)
				switch {
				case data[p] < _JDR_trans_keys[_mid]:
					_upper = _mid - 2
				case data[p] > _JDR_trans_keys[_mid+1]:
					_lower = _mid + 2
				default:
					_trans += int((_mid - int(_keys)) >> 1)
					goto _match
				}
			}
			_trans += _klen
		}

	_match:
		cs = int(_JDR_trans_targs[_trans])

		if _JDR_trans_actions[_trans] == 0 {
			goto _again
		}

		_acts = int(_JDR_trans_actions[_trans])
		_nacts = uint(_JDR_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _JDR_actions[_acts-1] {
			case 0:

				mark0[JDRNL] = p
			case 1:

				err = JDRonNL(data[mark0[JDRNL]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 2:

				mark0[JDRUtf8cp1] = p
			case 3:

				err = JDRonUtf8cp1(data[mark0[JDRUtf8cp1]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 4:

				mark0[JDRUtf8cp2] = p
			case 5:

				err = JDRonUtf8cp2(data[mark0[JDRUtf8cp2]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 6:

				mark0[JDRUtf8cp3] = p
			case 7:

				err = JDRonUtf8cp3(data[mark0[JDRUtf8cp3]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 8:

				mark0[JDRUtf8cp4] = p
			case 9:

				err = JDRonUtf8cp4(data[mark0[JDRUtf8cp4]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 10:

				mark0[JDRInt] = p
			case 11:

				err = JDRonInt(data[mark0[JDRInt]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 12:

				mark0[JDRFloat] = p
			case 13:

				err = JDRonFloat(data[mark0[JDRFloat]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 14:

				mark0[JDRTerm] = p
			case 15:

				err = JDRonTerm(data[mark0[JDRTerm]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 16:

				mark0[JDRRef] = p
			case 17:

				err = JDRonRef(data[mark0[JDRRef]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 18:

				mark0[JDRString] = p
			case 19:

				err = JDRonString(data[mark0[JDRString]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 20:

				mark0[JDRMLString] = p
			case 21:

				err = JDRonMLString(data[mark0[JDRMLString]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 22:

				mark0[JDRStamp] = p
			case 23:

				err = JDRonStamp(data[mark0[JDRStamp]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 24:

				mark0[JDRNoStamp] = p
			case 25:

				err = JDRonNoStamp(data[mark0[JDRNoStamp]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 26:

				mark0[JDROpenP] = p
			case 27:

				err = JDRonOpenP(data[mark0[JDROpenP]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 28:

				mark0[JDRCloseP] = p
			case 29:

				err = JDRonCloseP(data[mark0[JDRCloseP]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 30:

				mark0[JDROpenL] = p
			case 31:

				err = JDRonOpenL(data[mark0[JDROpenL]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 32:

				mark0[JDRCloseL] = p
			case 33:

				err = JDRonCloseL(data[mark0[JDRCloseL]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 34:

				mark0[JDROpenE] = p
			case 35:

				err = JDRonOpenE(data[mark0[JDROpenE]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 36:

				mark0[JDRCloseE] = p
			case 37:

				err = JDRonCloseE(data[mark0[JDRCloseE]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 38:

				mark0[JDROpenX] = p
			case 39:

				err = JDRonOpenX(data[mark0[JDROpenX]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 40:

				mark0[JDRCloseX] = p
			case 41:

				err = JDRonCloseX(data[mark0[JDRCloseX]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 42:

				mark0[JDRComma] = p
			case 43:

				err = JDRonComma(data[mark0[JDRComma]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 44:

				mark0[JDRColon] = p
			case 45:

				err = JDRonColon(data[mark0[JDRColon]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 46:

				mark0[JDROpen] = p
			case 47:

				err = JDRonOpen(data[mark0[JDROpen]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 48:

				mark0[JDRClose] = p
			case 49:

				err = JDRonClose(data[mark0[JDRClose]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 50:

				mark0[JDRInter] = p
			case 51:

				err = JDRonInter(data[mark0[JDRInter]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 52:

				mark0[JDRFIRST] = p
			case 53:

				err = JDRonFIRST(data[mark0[JDRFIRST]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 54:

				mark0[JDRRoot] = p

			}
		}

	_again:
		if cs == 0 {
			goto _out
		}
		p++
		if p != pe {
			goto _resume
		}
	_test_eof:
		{
		}
		if p == eof {
			__acts := _JDR_eof_actions[cs]
			__nacts := uint(_JDR_actions[__acts])
			__acts++
			for ; __nacts > 0; __nacts-- {
				__acts++
				switch _JDR_actions[__acts-1] {
				case 1:

					err = JDRonNL(data[mark0[JDRNL]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 11:

					err = JDRonInt(data[mark0[JDRInt]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 13:

					err = JDRonFloat(data[mark0[JDRFloat]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 15:

					err = JDRonTerm(data[mark0[JDRTerm]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 17:

					err = JDRonRef(data[mark0[JDRRef]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 19:

					err = JDRonString(data[mark0[JDRString]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 21:

					err = JDRonMLString(data[mark0[JDRMLString]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 23:

					err = JDRonStamp(data[mark0[JDRStamp]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 24:

					mark0[JDRNoStamp] = p
				case 25:

					err = JDRonNoStamp(data[mark0[JDRNoStamp]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 27:

					err = JDRonOpenP(data[mark0[JDROpenP]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 29:

					err = JDRonCloseP(data[mark0[JDRCloseP]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 31:

					err = JDRonOpenL(data[mark0[JDROpenL]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 33:

					err = JDRonCloseL(data[mark0[JDRCloseL]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 35:

					err = JDRonOpenE(data[mark0[JDROpenE]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 37:

					err = JDRonCloseE(data[mark0[JDRCloseE]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 39:

					err = JDRonOpenX(data[mark0[JDROpenX]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 41:

					err = JDRonCloseX(data[mark0[JDRCloseX]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 43:

					err = JDRonComma(data[mark0[JDRComma]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 45:

					err = JDRonColon(data[mark0[JDRColon]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 47:

					err = JDRonOpen(data[mark0[JDROpen]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 49:

					err = JDRonClose(data[mark0[JDRClose]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 51:

					err = JDRonInter(data[mark0[JDRInter]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 53:

					err = JDRonFIRST(data[mark0[JDRFIRST]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 54:

					mark0[JDRRoot] = p
				case 55:

					err = JDRonRoot(data[mark0[JDRRoot]:p], state)
					if err != nil {
						p++
						goto _out

					}

				}
			}
		}

	_out:
		{
		}
	}

	if p < len(data) || cs < JDR_first_final {
		return errors.New("JDR bad syntax: " + string(state.jdr[p:]))
	}
	return nil
}
